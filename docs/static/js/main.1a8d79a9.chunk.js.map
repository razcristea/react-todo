{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","useState","userInput","getUserInput","todos","setToDos","toggleCompletion","e","clicked","target","oldValue","className","split","newValue","filter","item","document","getElementById","id","handleDelete","popOne","slice","onSubmit","preventDefault","alert","newTodo","key","Date","now","text","completed","type","placeholder","value","onChange","props","map","todo","onClick","length","ids","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCFD,WAAgB,IAAD,EAEUC,mBAAS,IAFnB,mBAElBC,EAFkB,KAEPC,EAFO,OAGEF,mBAAS,IAHX,mBAGlBG,EAHkB,KAGXC,EAHW,KAuCpBC,EAAiB,SAAAC,GACnB,IAAMC,EAAUD,EAAEE,OAEZC,EAAYF,EAAQG,UAAUC,MAAM,KAAM,GAC1CC,EAFS,CAAC,OAAQ,SAEAC,QAAO,SAAAC,GAAI,OAAIA,IAASL,KAAU,GAC1DM,SAASC,eAAeT,EAAQU,IAAIP,UAAY,aAAaE,GAG3DM,EAAa,SAACZ,GAEhB,OADWA,EAAEE,OAAOS,IAEhB,IAAK,UACDb,EAAS,IACT,MACJ,IAAK,UACD,IAAMe,EAAShB,EAAMiB,MAAM,GAAG,GAC9BhB,EAASe,KASrB,OACI,yBAAKF,GAAG,aACJ,0BAAMI,SA1DK,SAAAf,GAEf,GADAA,EAAEgB,iBACgB,KAAdrB,EACAsB,MAAM,2BACH,CACH,IAEMC,EAAU,CACZC,IAHQC,KAAKC,MAIbC,KAAM3B,EACN4B,WAJc,GAMlBzB,EAAS,GAAD,mBAAKD,GAAL,CAAYqB,KACpBtB,EAAa,OA8CT,2BAAO4B,KAAK,OAAOC,YAAY,SAASC,MAAO/B,EAAWgC,SA7DnD,SAAA3B,GAAC,OAAGJ,EAAaI,EAAEE,OAAOwB,UA8DjC,2BAAOF,KAAK,SAASE,MAAM,SAE/B,yBAAKf,GAAG,iBACJ,mBA9CO,SAACiB,GAAD,OAASA,EAAM/B,MAAMgC,KAAI,SAAAC,GAAI,OAC5C,yBACIX,IAAKW,EAAKX,IACVR,GAAImB,EAAKX,IACTf,UAAW,aAAa0B,EAAKP,UAC7BQ,QAAShC,GACJ+B,EAAKR,WAwCN,CAAczB,MAAOA,KAExBA,EAAMmC,OAAS,EAAI,6BAAK,mBAtCd,SAACJ,GAAD,OAASA,EAAMK,IAAIJ,KAAI,SAAAlB,GAAE,OACxC,4BAAQQ,IAAKR,EAAIA,GAAIA,EAAIP,UAAU,aAAa2B,QAASnB,SAqC5B,CAAcqB,IAXhC,CAAC,UAAW,cAW4C,QDvE3D,MAASxB,SAASC,eAAe,SD2H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1a8d79a9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from 'react'\nimport './App.css'\n\n\nexport default function App() {\n\n    const [ userInput, getUserInput ] = useState('')\n    const [ todos, setToDos ] = useState([])\n\n\n    const handleChange=e=> getUserInput(e.target.value)\n\n    const handleSubmit=e=> {\n        e.preventDefault()\n        if (userInput === ''){\n            alert('Please type a task!')\n        } else {\n            const key = Date.now()\n            const completed = false\n            const newTodo = {\n                key: key,\n                text: userInput,\n                completed: completed\n            }\n            setToDos([...todos, newTodo])\n            getUserInput('')\n        }\n    }\n\n    const DisplayToDos=(props)=>props.todos.map(todo=>    \n        <div \n            key={todo.key} \n            id={todo.key} \n            className={'completed-'+todo.completed}\n            onClick={toggleCompletion}>\n                {todo.text}\n        </div>\n    )\n\n    const DeleteButton=(props)=>props.ids.map(id=> \n        <button key={id} id={id} className=\"btn-delete\" onClick={handleDelete}></button>)\n\n\n    const toggleCompletion=e=>{\n        const clicked = e.target\n        const values = ['true', 'false']\n        const oldValue = (clicked.className.split('-'))[1]\n        const newValue = values.filter(item => item !== oldValue)[0]\n        document.getElementById(clicked.id).className = 'completed-'+newValue\n    }\n\n    const handleDelete=(e)=>{\n        const id = e.target.id\n        switch (id){\n            case 'del-all':\n                setToDos([])\n                break\n            case 'del-one':\n                const popOne = todos.slice(0,-1)\n                setToDos(popOne)\n                break\n            default:\n                break\n        }\n    }\n\n    const btnIds = ['del-one', 'del-all']\n\n    return(\n        <div id='container'>\n            <form onSubmit={handleSubmit}>\n                <input type='text' placeholder='TO DO:' value={userInput} onChange={handleChange} />\n                <input type='submit' value='ADD' />\n            </form>\n            <div id='items-wrapper'>\n                <DisplayToDos todos={todos}/>\n            </div>\n            {todos.length > 0 ? <div><DeleteButton ids={btnIds} /></div> : null}\n        </div>\n    )\n}"],"sourceRoot":""}